% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rules.R
\name{sv_regex}
\alias{sv_regex}
\title{Validate that a field matches a regular expression}
\usage{
sv_regex(
  pattern,
  message,
  ignore.case = FALSE,
  perl = FALSE,
  fixed = FALSE,
  useBytes = FALSE,
  invert = FALSE
)
}
\arguments{
\item{pattern}{Character string containing a regular expression (or character
string if \code{fixed = TRUE}) to be tested against. If a character vector of
length 2 or more is supplied, the first element is used with a warning.}

\item{message}{The validation error message to use if a value fails to match
the pattern.}

\item{ignore.case, perl, fixed, useBytes, invert}{Options passed through to
\code{\link[base:grep]{base::grepl()}}.}
}
\value{
A function suitable for using as an
\code{\link[=InputValidator]{InputValidator$add_rule()}} rule.
}
\description{
A validation function, suitable for use with \code{InputValidator$add_rule()},
that checks whether input values match the specified regular expression.
}
\examples{
# Ignore withReactiveDomain(), it's just required to get this example to run
# outside of Shiny
shiny::withReactiveDomain(shiny::MockShinySession$new(), {

  iv <- InputValidator$new()

  iv$add_rule("lookup_id",
    sv_regex("^[a-zA-Z0-9]$", "Only alphanumeric characters are allowed")
  )

  # If you're more comfortable with wildcards than regex, use glob2rx
  iv$add_rule("image_filename",
    sv_regex(glob2rx("*.png"),
      message = "A filename ending in png was expected",
      ignore.case = TRUE
    )
  )
})

}
