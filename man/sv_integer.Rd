% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rules.R
\name{sv_integer}
\alias{sv_integer}
\title{Validate that a field is an integer}
\usage{
sv_integer(
  message = "An integer is required",
  allow_multiple = FALSE,
  allow_na = FALSE,
  allow_nan = FALSE
)
}
\arguments{
\item{message}{The validation error message to use if a value is not an
integer.}

\item{allow_multiple}{If \code{FALSE} (the default), then the length of the input
vector must be exactly one; if \code{TRUE}, then any length is allowed
(including a length of zero; use \code{\link[=sv_required]{sv_required()}} if one or more values
should be required).}

\item{allow_na}{If \code{FALSE} (the default for both options), then any
\code{NA} or \code{NaN} element will cause validation to fail.}

\item{allow_nan}{If \code{FALSE} (the default for both options), then any
\code{NA} or \code{NaN} element will cause validation to fail.}
}
\value{
A function suitable for using as an
\code{\link[=InputValidator]{InputValidator$add_rule()}} rule.
}
\description{
The \code{sv_integer()} function validates that a field is 'integer-like' with the
\code{{value} \%\% 1 == 0} test. Very large values (generally with absolute exponent
values greater than 15) won't be validated correctly due to floating point
imprecision. By default, only a single, finite, not-missing, valid numbers
are allowed, but each of those criteria can be controlled via arguments.
}
\examples{
# Ignore withReactiveDomain(), it's just required to get this example to run
# outside of Shiny
shiny::withReactiveDomain(shiny::MockShinySession$new(), {

  iv <- InputValidator$new()

  iv$add_rule("count", sv_integer())
  iv$add_rule("count", ~if (. <= 0) "A positive value is required")
})

}
