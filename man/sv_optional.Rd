% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rules.R
\name{sv_optional}
\alias{sv_optional}
\title{Indicate that a field is optional}
\usage{
sv_optional(test = input_provided)
}
\arguments{
\item{test}{A single-argument function, or single-sided formula (using \code{.} to
access the value to test), that returns \code{TRUE} for success and \code{FALSE} for
failure.}
}
\value{
A function suitable for using as an
\code{\link[=InputValidator]{InputValidator$add_rule()}} rule.
}
\description{
Call \code{sv_optional()} to generate a validation function that indicates an
input is allowed to \emph{not} be present. If an \code{sv_optional()} rule sees that an
input is not present, subsequent rules for that input are skipped and the
input is considered valid. Otherwise, the rule simply passes.
(\code{sv_optional()} will never return a validation error/message.)

By default, the definition of "is present" is based on \code{\link[=input_provided]{input_provided()}}.

Child validators (see \code{\link[=InputValidator]{InputValidator$add_validator()}}) are
not affected by \code{sv_optional()} rules in parent validators; only rules in the
same validator instance as the \code{sv_optional()} will be skipped.
}
\examples{
# Ignore withReactiveDomain(), it's just required to get this example to run
# outside of Shiny
shiny::withReactiveDomain(shiny::MockShinySession$new(), {

  iv <- InputValidator$new()

  # An email is not required, but if present, it must be valid
  iv$add_rule("email", sv_optional())
  iv$add_rule("email", ~ if (!is_valid_email(.)) "Please provide a valid email"))
})
}
