% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rules.R
\name{sv_between}
\alias{sv_between}
\title{Validate that a field is a number bounded by minimum and maximum values}
\usage{
sv_between(
  minimum,
  maximum,
  allowNA = FALSE,
  allowNaN = FALSE,
  message = NULL,
  lang = NULL
)
}
\arguments{
\item{allowNA}{If \code{FALSE} (the default), then any \code{NA} element will cause
validation to fail.}

\item{allowNaN}{If \code{FALSE} (the default), then any \code{NaN} element will cause
validation to fail.}

\item{message}{The validation error message to use if a value fails to match
the rule. If left as \code{NULL}, a validation error message will be generated
according to the chosen language (specified in \code{lang}).}

\item{lang}{The language to use for automatic creation of validation error
messages. By default, \code{NULL} will create English (\code{"en"}) text. Other
options include French (\code{"fr"}), German (\code{"de"}) and Spanish (\code{"es"}).}
}
\value{
A function suitable for using as an
\code{\link[=InputValidator]{InputValidator$add_rule()}} rule.
}
\description{
\code{sv_numeric} and \code{sv_integer} validate that a field \code{is.numeric} and
\code{is.integer}, respectively. By default, only a single, finite, not-missing,
valid number/integer is allowed, but each of those criteria can be controlled
via arguments.
}
\examples{
# Ignore withReactiveDomain(), it's just required to get this example to run
# outside of Shiny
shiny::withReactiveDomain(shiny::MockShinySession$new(), {

  iv <- InputValidator$new()

  iv$add_rule("count", sv_between(10, 10000))
  iv$add_rule("count", ~if (. <= 0) "A positive value is required")

})
}
