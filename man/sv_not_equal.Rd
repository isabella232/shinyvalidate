% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rules.R
\name{sv_not_equal}
\alias{sv_not_equal}
\title{Validate that a field is not equal to a specified value}
\usage{
sv_not_equal(
  rhs,
  message_fmt = "Must not be equal to {rhs}.",
  allow_multiple = FALSE,
  allow_na = FALSE,
  allow_nan = FALSE,
  allow_inf = FALSE
)
}
\arguments{
\item{rhs}{The right hand side (RHS) value is to be used for the comparison
with the field value. The validation check will effectively be of the form
\verb{<field> != <rhs>}.}

\item{message_fmt}{The validation error message to use if the field fails the
validation test. Use the \code{"{rhs}"} string parameter to customize the
message, including what was set in \code{rhs}. While the default message uses
this string parameter, it is not required in a user-defined \code{message_fmt}
string.}

\item{allow_multiple}{If \code{FALSE} (the default), then the length of the input
vector must be exactly one; if \code{TRUE}, then any length is allowed
(including a length of zero; use \code{\link[=sv_required]{sv_required()}} if one or more values
should be required).}

\item{allow_na}{If \code{FALSE} (the default for both options), then any
\code{NA} or \code{NaN} element will cause validation to fail.}

\item{allow_nan}{If \code{FALSE} (the default for both options), then any
\code{NA} or \code{NaN} element will cause validation to fail.}

\item{allow_inf}{If \code{FALSE} (the default), then any \code{Inf} or \code{-Inf} element
will cause validation to fail.}
}
\value{
A function suitable for using as an
\code{\link[=InputValidator]{InputValidator$add_rule()}} rule.
}
\description{
The \code{sv_not_equal()} function compares the field value to a specified value
with the \code{!=} operator.
}
\examples{
# Ignore withReactiveDomain(), it's just required to get this example to run
# outside of Shiny
shiny::withReactiveDomain(shiny::MockShinySession$new(), {

  iv <- InputValidator$new()

  iv$add_rule("score", sv_not_equal(0))
})

}
